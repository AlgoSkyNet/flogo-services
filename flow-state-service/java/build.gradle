import java.text.SimpleDateFormat

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.13'
	compile 'io.dropwizard:dropwizard-core:0.9.2'
	compile 'redis.clients:jedis:2.8.0'
    compile 'org.json:json:20090211'

    testCompile 'junit:junit:4.12'
}

sourceCompatibility = 1.8

//idea {
//    project {
//        languageLevel = '1.8'
//        ipr {
//            withXml {
//                IdeaEnricher.updateBuildOutputFolderForGradle(this.project, it.asNode())
//            }
//        }
//    }
//}

// Ensure the IWS Workspace file is also deleted (this is not the default)
task cleanIdea(dependsOn: [cleanIdeaProject, cleanIdeaWorkspace, cleanIdeaModule],
        type: Delete,
        overwrite: true,
        description: 'Cleans IDEA project files (IML, IPR, IWS)',
        group: 'IDE')

compileJava {
    options.encoding = "UTF-8"
}

ext {
    timestamp = new Date()
    buildDate = new SimpleDateFormat('dd-MMM-yyyy').format(timestamp)
    buildTime = new SimpleDateFormat('hh:mm aa').format(timestamp)
}

jar {
    manifest {
        attributes(
                "Build-Jdk": System.properties['java.version'],
                "Built-By": System.properties['user.name'],
                "Build-Date": buildDate,
                "Build-Time": buildTime,
                "Bundle-ManifestVersion": "2",
                "Bundle-Version": version,
                "Bundle-Name": "TIBCO Flogo State Service",
                "Bundle-SymbolicName": "com.tibco.flogo.process",
                "Implementation-Title": "TIBCO Flogo State Service",
                "Created-By": "Gradle $gradle.gradleVersion",
                "Implementation-Vendor-Id": "TIBCO Software, Inc.",
                "Implementation-Version": version)
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}

mainClassName = 'com.tibco.flogo.ss.service.FlogoServerService'

tasks.withType(Tar){
    compression = Compression.GZIP
}

startScripts {
    classpath += files('src/dist/lib/conf')

    doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\conf', '%APP_HOME%\\conf')
        unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/conf', '$APP_HOME/conf')
    }
}

task cleanApp(type: Delete) {
    delete "$buildDir/install"
}

run {
    args 'server', 'server.yml'
}
